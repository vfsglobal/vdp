%all_columns {
  display: flex;
  flex-wrap: wrap;
  > * {
    display: flex;
    @extend %marb_small;
    box-sizing: border-box;
  }
}

$first_res: Sdesktop;

$all_column_details: (
  6: (
    details: (
      null: 6,
      $first_res: 4
    ),
    space: $box_spacing
  ),
  4_full: (
    details: (
      null: 4,
      Stablet: 2,
      mobile: 1
    ),
    space: 0%
  ),
  4_big: (
    details: (
      null: 4,
      mobile: 1
    ),
    space: $box_big_spacing
  ),
  2: (
    details: (
      null: 2,
      $first_res: 1
    ),
    space: $box_spacing
  )
);

$column_el_selector_default_options: (
  with_ampersant: true,
  inverse: false
);

@function modify_column_selector($selector, $options: false) {
  $options: autocorrect_options($options, $column_el_selector_default_options);

  $with_ampersant: map-get($options, with_ampersant);
  $inverse: map-get($options, inverse);

  @return if($with_ampersant, "&", "") +
    if($inverse, ":not(" + $selector + ")", $selector);
}

@function get_column_selector($column, $type, $options: false) {
  @if $type == first_column {
    @return modify_column_selector(":nth-child(#{$column}n+1)", $options);
  } @else if $type == last_column {
    @return modify_column_selector(":nth-child(#{$column}n)", $options);
  } @else if $type == first_row {
    @return modify_column_selector(":nth-child(-n+#{$column})", $options);
  } @else if $type == last_row_first_child {
    @return modify_column_selector(
      ":nth-child(#{$column}n+1):nth-last-child(-n+#{$column})",
      $options
    );
  } @else if $type == last_row {
    $selector: get_column_selector(
      $column,
      "last_row_first_child",
      (
        with_ampersant: false,
        inverse: false
      )
    );

    @return modify_column_selector($selector, $options) + ", " +
      modify_column_selector($selector + " ~ *", $options);
  }
}

@mixin set_column($column, $margin_right) {
  > * {
    width: (100 - (($column - 1) * $margin_right)) / $column;
    #{get_column_selector($column, last_column, (inverse: true))} {
      margin-right: $margin_right;
    }
    #{get_column_selector($column, first_row, (inverse: true))} {
      transform: scale(0.5);
    }
    // &:not(:nth-child(#{$column}n)) {
    //   margin-right: $margin_right;
    // }
    // &:last-child {
    //   margin-right: 0%;
    // }
    /*testing: first_column: #{get_column_selector($column, first_column)}*/
    /*testing: first_column: #{get_column_selector($column, first_column, (with_ampersant: false))}*/
    /*testing: first_column: #{get_column_selector($column, first_column, (inverse: true))}*/
    /*testing: first_column: #{get_column_selector($column, first_column, (with_ampersant: false, inverse: true))}*/
    /*testing: last_column: #{get_column_selector($column, last_column)}*/
    /*testing: first_row: #{get_column_selector($column, first_row)}*/
    /*testing: last_row_first_child: #{get_column_selector($column, last_row_first_child)}*/
    /*testing: last_row: #{get_column_selector($column, last_row)}*/
    /*testing: last_row: #{get_column_selector($column, last_row, (with_ampersant: false))}*/
    /*testing: last_row: #{get_column_selector($column, last_row, (inverse: true))}*/
    /*testing: last_row: #{get_column_selector($column, last_row, (with_ampersant: false, inverse: true)))}*/
    // #{get_column_selector($column, last_row)} {
    //   margin-bottom: 0px !important;
    // }
  }
}
@function autocorrect_res($res) {
  @return if(
    type-of($res) == "string",
    abs(map-get($media_resolutions, $res)),
    $res
  );
}
@mixin set_multi_column($config) {
  $details: map-get($config, details);
  $space: map-get($config, space);
  $center: map-get($config, center);

  $center: if($center == null, true, false);

  @if ($center) {
    justify-content: center;
  }

  $all_res: map-keys($details);
  $count: length($all_res);

  @for $i from 1 through $count {
    $res_key: nth($all_res, $i);
    $res: autocorrect_res($res_key);
    $next_res: autocorrect_res(if($i == $count, null, nth($all_res, $i + 1)));

    $media: if($res == null, "", "(max-width: " + $res + "px)");
    $media: $media +
      if(
        $next_res == null,
        "",
        if($media == "", "", " and ") + "(min-width: " + ($next_res + 1) + "px)"
      );

    @media screen and #{$media} {
      @include set_column(map-get($details, $res_key), $space);
    }
  }
}

@mixin add_all_column() {
  @each $key, $config in $all_column_details {
    %col#{$key} {
      @extend %all_columns;
      @include set_multi_column($config);
    }
  }
}
@include add_all_column();
